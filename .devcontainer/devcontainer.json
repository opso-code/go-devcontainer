// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.245.0/containers/docker-existing-dockerfile
{
	"name": "Go",
	"build": {
		"dockerfile": "../Dockerfile",
		"args": {
			"VARIANT": "1.18",
			"CHANGE_SOURCE": "true",
			"PROTOBUFF_VERSION": "3.17.3",
			"PROTO_GEN_GO_VERSION": "1.28.0"
		}
	},
	"customizations": {
		"vscode": {
			"settings": {},
			"extensions": [
				"golang.go",
				"bungcip.better-toml",
				"donjayamanne.githistory",
				"eamodio.gitlens",
				"zxh404.vscode-proto3"
			]
		}
	},
	// "forwardPorts": [10010],
	"appPort": [
		"10000-10100:10000-10100"
	],
	// "initializeCommand": "umask 177 && touch /root/.zsh_history",
	"mounts": [
		"source=${localEnv:HOME}/.zsh_history,target=/root/.zsh_history,type=bind"
	],
	"workspaceMount": "source=${localWorkspaceFolder}/../,target=/workspace,type=bind,consistency=cached",
	"workspaceFolder": "/workspace",
	"hostRequirements": {
		"memory": "4gb"
	},
	"remoteEnv": {
		"PATH": "${containerEnv:PATH}:/usr/local/protoc/bin"
	}
	
	// Uncomment the next line to run commands after the container is created - for example installing curl.
	// "postCreateCommand": "apt-get update && apt-get install -y curl",
	
	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	// "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],
	
	// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
	// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],
	
	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "vscode"
}